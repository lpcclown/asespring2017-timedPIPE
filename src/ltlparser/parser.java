
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 01 03:03:59 EDT 2016
//----------------------------------------------------

package ltlparser;

import java_cup.runtime.*;
import ltlparser.errormsg.*;
import ltlparser.ltlabsyntree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 01 03:03:59 EDT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\004\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\006\000\002\013\003\000\002\010\003\000\002" +
    "\010\005\000\002\011\002\000\002\011\004\000\002\012" +
    "\002\000\002\012\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\010\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\020\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\005\000\002\022\005\000\002\022\007\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\006\003" +
    "\000\002\007\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\004\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\006\000\002\025\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\050\003\040\004\014\005\034\006\024\007" +
    "\006\010\032\013\015\025\035\031\007\032\036\033\011" +
    "\047\021\050\022\054\042\055\017\056\030\057\025\060" +
    "\041\061\044\001\002\000\004\047\174\001\002\000\014" +
    "\002\000\011\125\012\126\014\124\015\123\001\002\000" +
    "\046\004\014\005\034\006\024\007\006\010\032\013\015" +
    "\025\035\031\007\032\036\033\011\047\021\050\022\054" +
    "\042\055\017\056\030\057\025\060\041\061\044\001\002" +
    "\000\006\055\uffde\056\uffde\001\002\000\072\002\ufffa\011" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\051\ufffa\052" +
    "\ufffa\001\002\000\006\055\uffdc\056\uffdc\001\002\000\016" +
    "\002\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\046\ufffe\001" +
    "\002\000\072\002\uffd3\011\uffd3\012\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\051\uffd3\052\uffd3\001\002\000\046\004\014" +
    "\005\034\006\024\007\006\010\032\013\015\025\035\031" +
    "\007\032\036\033\011\047\021\050\022\054\042\055\017" +
    "\056\030\057\025\060\041\061\044\001\002\000\046\004" +
    "\014\005\034\006\024\007\006\010\032\013\015\025\035" +
    "\031\007\032\036\033\011\047\021\050\022\054\042\055" +
    "\017\056\030\057\025\060\041\061\044\001\002\000\004" +
    "\047\166\001\002\000\066\002\uffd7\011\uffd7\012\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd5\001\002\000\072\002\ufff7\011" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\051\ufff7\052" +
    "\ufff7\001\002\000\046\004\014\005\034\006\024\007\006" +
    "\010\032\013\015\025\035\031\007\032\036\033\011\047" +
    "\021\050\022\054\042\055\017\056\030\057\025\060\041" +
    "\061\044\001\002\000\026\025\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff4\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\001\002\000\004\002\156\001\002\000\046\004\014\005" +
    "\034\006\024\007\006\010\032\013\015\025\035\031\007" +
    "\032\036\033\011\047\021\050\022\054\042\055\017\056" +
    "\030\057\025\060\041\061\044\001\002\000\072\002\uffda" +
    "\011\uffda\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\051\uffda" +
    "\052\uffda\001\002\000\016\002\ufffd\011\ufffd\012\ufffd\014" +
    "\ufffd\015\ufffd\046\ufffd\001\002\000\072\002\uffd1\011\uffd1" +
    "\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\051\uffd1\052\uffd1" +
    "\001\002\000\074\002\uffd6\011\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd4\051\uffd6\052\uffd6\001\002\000" +
    "\072\002\uffd2\011\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\051\uffd2\052\uffd2\001\002\000\046\004\014\005\034" +
    "\006\024\007\006\010\032\013\015\025\035\031\007\032" +
    "\036\033\011\047\021\050\022\054\042\055\017\056\030" +
    "\057\025\060\041\061\044\001\002\000\006\055\071\056" +
    "\136\001\002\000\046\004\014\005\034\006\024\007\006" +
    "\010\032\013\015\025\035\031\007\032\036\033\011\047" +
    "\021\050\022\054\042\055\017\056\030\057\025\060\041" +
    "\061\044\001\002\000\024\025\035\047\072\050\022\054" +
    "\042\055\071\056\030\057\025\060\041\061\044\001\002" +
    "\000\006\055\uffdd\056\uffdd\001\002\000\072\002\ufff9\011" +
    "\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\052" +
    "\ufff9\001\002\000\004\002\uffff\001\002\000\072\002\uffd9" +
    "\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\051\uffd9" +
    "\052\uffd9\001\002\000\072\002\uffdb\011\uffdb\012\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\051\uffdb\052\uffdb\001\002\000" +
    "\064\002\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\062" +
    "\017\066\020\054\021\047\022\045\023\063\024\050\025" +
    "\061\026\055\027\046\030\057\035\051\036\053\037\067" +
    "\040\065\041\056\042\060\043\064\045\052\046\ufffb\001" +
    "\002\000\072\002\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\051\uffd8\052\uffd8\001\002\000\024\025\035" +
    "\047\072\050\022\054\042\055\071\056\030\057\025\060" +
    "\041\061\044\001\002\000\024\025\035\047\072\050\022" +
    "\054\042\055\071\056\030\057\025\060\041\061\044\001" +
    "\002\000\024\025\035\047\072\050\022\054\042\055\071" +
    "\056\030\057\025\060\041\061\044\001\002\000\024\025" +
    "\035\047\072\050\022\054\042\055\071\056\030\057\025" +
    "\060\041\061\044\001\002\000\024\025\035\047\072\050" +
    "\022\054\042\055\071\056\030\057\025\060\041\061\044" +
    "\001\002\000\024\025\035\047\072\050\022\054\042\055" +
    "\071\056\030\057\025\060\041\061\044\001\002\000\024" +
    "\025\035\047\072\050\022\054\042\055\071\056\030\057" +
    "\025\060\041\061\044\001\002\000\024\025\035\047\072" +
    "\050\022\054\042\055\071\056\030\057\025\060\041\061" +
    "\044\001\002\000\024\025\035\047\072\050\022\054\042" +
    "\055\071\056\030\057\025\060\041\061\044\001\002\000" +
    "\024\025\035\047\072\050\022\054\042\055\071\056\030" +
    "\057\025\060\041\061\044\001\002\000\024\025\035\047" +
    "\072\050\022\054\042\055\071\056\030\057\025\060\041" +
    "\061\044\001\002\000\024\025\035\047\072\050\022\054" +
    "\042\055\071\056\030\057\025\060\041\061\044\001\002" +
    "\000\024\025\035\047\072\050\022\054\042\055\071\056" +
    "\030\057\025\060\041\061\044\001\002\000\024\025\035" +
    "\047\072\050\022\054\042\055\071\056\030\057\025\060" +
    "\041\061\044\001\002\000\024\025\035\047\072\050\022" +
    "\054\042\055\071\056\030\057\025\060\041\061\044\001" +
    "\002\000\024\025\035\047\072\050\022\054\042\055\071" +
    "\056\030\057\025\060\041\061\044\001\002\000\024\025" +
    "\035\047\072\050\022\054\042\055\071\056\030\057\025" +
    "\060\041\061\044\001\002\000\024\025\035\047\072\050" +
    "\022\054\042\055\071\056\030\057\025\060\041\061\044" +
    "\001\002\000\024\025\035\047\072\050\022\054\042\055" +
    "\071\056\030\057\025\060\041\061\044\001\002\000\072" +
    "\002\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\050\025\061" +
    "\026\055\027\046\030\057\035\051\036\053\037\uffc3\040" +
    "\uffc3\041\uffc3\042\060\043\064\044\uffc3\045\052\046\uffc3" +
    "\051\uffc3\052\uffc3\001\002\000\074\002\uffd7\011\uffd7\012" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\051\uffd7\052" +
    "\uffd7\001\002\000\024\025\035\047\072\050\022\054\042" +
    "\055\071\056\030\057\025\060\041\061\044\001\002\000" +
    "\062\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046\075\001\002\000" +
    "\050\016\062\017\066\020\054\021\047\022\045\023\063" +
    "\024\050\025\061\026\055\027\046\030\057\035\051\036" +
    "\053\037\067\040\065\041\056\042\060\043\064\045\052" +
    "\001\002\000\072\002\uffd0\011\uffd0\012\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\051\uffd0\052\uffd0\001\002\000\072\002" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\054\021\047\022\045\023\063\024\050\025\061\026" +
    "\055\027\046\030\057\035\051\036\053\037\067\040\065" +
    "\041\056\042\060\043\064\044\uffc8\045\052\046\uffc8\051" +
    "\uffc8\052\uffc8\001\002\000\072\002\uffc2\011\uffc2\012\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\050\025\061\026\055\027\046\030\057" +
    "\035\051\036\053\037\uffc2\040\uffc2\041\uffc2\042\060\043" +
    "\064\044\uffc2\045\052\046\uffc2\051\uffc2\052\uffc2\001\002" +
    "\000\072\002\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\050" +
    "\025\061\026\055\027\046\030\057\035\051\036\053\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\052" +
    "\046\uffbf\051\uffbf\052\uffbf\001\002\000\072\002\uffc4\011" +
    "\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\050\025\061\026\055\027" +
    "\046\030\057\035\051\036\053\037\067\040\065\041\056" +
    "\042\060\043\064\044\uffc4\045\052\046\uffc4\051\uffc4\052" +
    "\uffc4\001\002\000\072\002\uffc9\011\uffc9\012\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\054\021\047\022\045\023" +
    "\063\024\050\025\061\026\055\027\046\030\057\035\051" +
    "\036\053\037\067\040\065\041\056\042\060\043\064\044" +
    "\uffc9\045\052\046\uffc9\051\uffc9\052\uffc9\001\002\000\072" +
    "\002\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\055\027\uffcf\030\057\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\051\uffcf\052\uffcf\001\002\000\072\002\uffc0\011\uffc0\012" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\050\025\061\026\055\027\046\030" +
    "\057\035\051\036\053\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\052\046\uffc0\051\uffc0\052\uffc0\001" +
    "\002\000\072\002\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\051\uffcc\052\uffcc\001\002\000\072\002\uffc1" +
    "\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\050\025\061\026\055" +
    "\027\046\030\057\035\051\036\053\037\uffc1\040\uffc1\041" +
    "\uffc1\042\060\043\064\044\uffc1\045\052\046\uffc1\051\uffc1" +
    "\052\uffc1\001\002\000\072\002\uffcd\011\uffcd\012\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\051\uffcd\052\uffcd\001\002\000" +
    "\072\002\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\050\025" +
    "\061\026\055\027\046\030\057\035\051\036\053\037\067" +
    "\040\065\041\056\042\060\043\064\044\uffc7\045\052\046" +
    "\uffc7\051\uffc7\052\uffc7\001\002\000\072\002\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\050\025\061\026\055\027\046" +
    "\030\057\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\052\046\uffbe\051\uffbe\052\uffbe" +
    "\001\002\000\052\016\062\017\066\020\054\021\047\022" +
    "\045\023\063\024\050\025\061\026\055\027\046\030\057" +
    "\035\051\036\053\037\067\040\065\041\056\042\060\043" +
    "\064\044\113\045\052\001\002\000\072\002\uffbc\011\uffbc" +
    "\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\051\uffbc\052\uffbc" +
    "\001\002\000\072\002\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\050\025\061\026\055\027\046\030\057\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\052\046\uffbd\051\uffbd\052\uffbd\001\002\000\072\002" +
    "\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\055\027\uffce\030\057\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\051" +
    "\uffce\052\uffce\001\002\000\072\002\uffc6\011\uffc6\012\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\050\025\061\026\055\027\046\030\057" +
    "\035\051\036\053\037\067\040\065\041\056\042\060\043" +
    "\064\044\uffc6\045\052\046\uffc6\051\uffc6\052\uffc6\001\002" +
    "\000\072\002\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\055\027\uffcb\030\057\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\051\uffcb\052\uffcb\001\002\000\072\002\uffc5\011" +
    "\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\050\025\061\026\055\027" +
    "\046\030\057\035\051\036\053\037\067\040\065\041\056" +
    "\042\060\043\064\044\uffc5\045\052\046\uffc5\051\uffc5\052" +
    "\uffc5\001\002\000\072\002\uffca\011\uffca\012\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\055\027\uffca\030\057\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\051\uffca\052\uffca\001\002\000\016" +
    "\002\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\046\uffe8\001" +
    "\002\000\046\004\014\005\034\006\024\007\006\010\032" +
    "\013\015\025\035\031\007\032\036\033\011\047\021\050" +
    "\022\054\042\055\017\056\030\057\025\060\041\061\044" +
    "\001\002\000\046\004\014\005\034\006\024\007\006\010" +
    "\032\013\015\025\035\031\007\032\036\033\011\047\021" +
    "\050\022\054\042\055\017\056\030\057\025\060\041\061" +
    "\044\001\002\000\046\004\014\005\034\006\024\007\006" +
    "\010\032\013\015\025\035\031\007\032\036\033\011\047" +
    "\021\050\022\054\042\055\017\056\030\057\025\060\041" +
    "\061\044\001\002\000\046\004\014\005\034\006\024\007" +
    "\006\010\032\013\015\025\035\031\007\032\036\033\011" +
    "\047\021\050\022\054\042\055\017\056\030\057\025\060" +
    "\041\061\044\001\002\000\016\002\ufff0\011\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\046\ufff0\001\002\000\016\002\uffef\011" +
    "\uffef\012\126\014\uffef\015\uffef\046\uffef\001\002\000\016" +
    "\002\uffee\011\125\012\126\014\uffee\015\uffee\046\uffee\001" +
    "\002\000\016\002\uffed\011\125\012\126\014\uffed\015\uffed" +
    "\046\uffed\001\002\000\006\034\uffe4\052\152\001\002\000" +
    "\010\034\uffe2\035\150\052\uffe2\001\002\000\006\034\uffe3" +
    "\052\144\001\002\000\010\034\uffd6\035\uffd6\052\uffd6\001" +
    "\002\000\004\034\140\001\002\000\004\047\141\001\002" +
    "\000\046\004\014\005\034\006\024\007\006\010\032\013" +
    "\015\025\035\031\007\032\036\033\011\047\021\050\022" +
    "\054\042\055\017\056\030\057\025\060\041\061\044\001" +
    "\002\000\014\011\125\012\126\014\124\015\123\046\143" +
    "\001\002\000\016\002\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\046\uffeb\001\002\000\006\055\071\056\136\001\002" +
    "\000\004\035\146\001\002\000\006\055\071\056\136\001" +
    "\002\000\006\034\uffdf\052\uffdf\001\002\000\006\055\071" +
    "\056\136\001\002\000\006\034\uffe0\052\uffe0\001\002\000" +
    "\006\055\071\056\136\001\002\000\006\034\uffe1\052\uffe1" +
    "\001\002\000\016\002\uffe5\011\uffe5\012\uffe5\014\uffe5\015" +
    "\uffe5\046\uffe5\001\002\000\016\002\uffe7\011\uffe7\012\uffe7" +
    "\014\uffe7\015\uffe7\046\uffe7\001\002\000\004\002\001\001" +
    "\002\000\024\025\035\047\072\050\022\054\042\055\071" +
    "\056\030\057\025\060\041\061\044\001\002\000\004\051" +
    "\161\001\002\000\072\002\uffbb\011\uffbb\012\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\051\uffbb\052\uffbb\001\002\000\056" +
    "\016\062\017\066\020\054\021\047\022\045\023\063\024" +
    "\050\025\061\026\055\027\046\030\057\035\051\036\053" +
    "\037\067\040\065\041\056\042\060\043\064\045\052\046" +
    "\ufff3\051\ufff3\052\163\001\002\000\024\025\ufff1\047\ufff1" +
    "\050\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\001\002\000\014\011\125\012\126\014\124\015\123" +
    "\046\165\001\002\000\016\002\uffea\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\046\uffea\001\002\000\026\025\ufff2\046\ufff4" +
    "\047\ufff2\050\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\001\002\000\004\046\170\001\002\000\072" +
    "\002\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\051\ufff8\052\ufff8\001\002\000\016\002\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\046\uffec\001\002\000\016\002\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\015\uffe9\046\uffe9\001\002\000" +
    "\016\002\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\046\uffe6" +
    "\001\002\000\024\025\035\047\072\050\022\054\042\055" +
    "\071\056\030\057\025\060\041\061\044\001\002\000\006" +
    "\046\200\052\177\001\002\000\054\016\062\017\066\020" +
    "\054\021\047\022\045\023\063\024\050\025\061\026\055" +
    "\027\046\030\057\035\051\036\053\037\067\040\065\041" +
    "\056\042\060\043\064\045\052\046\ufff6\052\ufff6\001\002" +
    "\000\024\025\035\047\072\050\022\054\042\055\071\056" +
    "\030\057\025\060\041\061\044\001\002\000\016\002\ufffc" +
    "\011\ufffc\012\ufffc\014\ufffc\015\ufffc\046\ufffc\001\002\000" +
    "\054\016\062\017\066\020\054\021\047\022\045\023\063" +
    "\024\050\025\061\026\055\027\046\030\057\035\051\036" +
    "\053\037\067\040\065\041\056\042\060\043\064\045\052" +
    "\046\ufff5\052\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\036\002\022\003\004\004\011\005\025\006" +
    "\003\007\015\013\042\014\007\015\036\016\017\017\032" +
    "\023\012\024\030\025\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\172\004\011\005\025\006\003" +
    "\007\015\013\042\014\007\015\036\016\017\017\032\023" +
    "\012\024\030\025\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\171\004\011\005\025\006\003\007\015" +
    "\013\042\014\007\015\036\016\017\017\032\023\012\024" +
    "\030\025\026\001\001\000\034\003\170\004\011\005\025" +
    "\006\003\007\015\013\042\014\007\015\036\016\017\017" +
    "\032\023\012\024\030\025\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\163\004" +
    "\011\005\025\006\003\007\015\013\042\014\007\015\036" +
    "\016\072\017\032\023\012\024\030\025\026\001\001\000" +
    "\006\011\157\012\156\001\001\000\002\001\001\000\034" +
    "\003\154\004\011\005\025\006\003\007\015\013\042\014" +
    "\007\015\036\016\017\017\032\023\012\024\030\025\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\153" +
    "\004\011\005\025\006\003\007\015\013\042\014\007\015" +
    "\036\016\017\017\032\023\012\024\030\025\026\001\001" +
    "\000\012\015\133\020\136\021\132\022\134\001\001\000" +
    "\034\003\121\004\011\005\025\006\003\007\015\013\042" +
    "\014\007\015\036\016\017\017\032\023\012\024\030\025" +
    "\026\001\001\000\022\007\015\013\120\014\007\015\036" +
    "\016\017\023\012\024\030\025\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\015\013\117\014\007\015\036\016\017\023\012" +
    "\024\030\025\026\001\001\000\022\007\015\013\116\014" +
    "\007\015\036\016\017\023\012\024\030\025\026\001\001" +
    "\000\022\007\015\013\115\014\007\015\036\016\017\023" +
    "\012\024\030\025\026\001\001\000\022\007\015\013\114" +
    "\014\007\015\036\016\017\023\012\024\030\025\026\001" +
    "\001\000\022\007\015\013\113\014\007\015\036\016\017" +
    "\023\012\024\030\025\026\001\001\000\022\007\015\013" +
    "\111\014\007\015\036\016\017\023\012\024\030\025\026" +
    "\001\001\000\022\007\015\013\110\014\007\015\036\016" +
    "\017\023\012\024\030\025\026\001\001\000\022\007\015" +
    "\013\107\014\007\015\036\016\017\023\012\024\030\025" +
    "\026\001\001\000\022\007\015\013\106\014\007\015\036" +
    "\016\017\023\012\024\030\025\026\001\001\000\022\007" +
    "\015\013\105\014\007\015\036\016\017\023\012\024\030" +
    "\025\026\001\001\000\022\007\015\013\104\014\007\015" +
    "\036\016\017\023\012\024\030\025\026\001\001\000\022" +
    "\007\015\013\103\014\007\015\036\016\017\023\012\024" +
    "\030\025\026\001\001\000\022\007\015\013\102\014\007" +
    "\015\036\016\017\023\012\024\030\025\026\001\001\000" +
    "\022\007\015\013\101\014\007\015\036\016\017\023\012" +
    "\024\030\025\026\001\001\000\022\007\015\013\100\014" +
    "\007\015\036\016\017\023\012\024\030\025\026\001\001" +
    "\000\022\007\015\013\077\014\007\015\036\016\017\023" +
    "\012\024\030\025\026\001\001\000\022\007\015\013\076" +
    "\014\007\015\036\016\017\023\012\024\030\025\026\001" +
    "\001\000\022\007\015\013\075\014\007\015\036\016\017" +
    "\023\012\024\030\025\026\001\001\000\022\007\015\013" +
    "\067\014\007\015\036\016\017\023\012\024\030\025\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\015\013\073\014\007\015\036\016\072\023\012\024\030" +
    "\025\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\131" +
    "\004\011\005\025\006\003\007\015\013\042\014\007\015" +
    "\036\016\017\017\032\023\012\024\030\025\026\001\001" +
    "\000\034\003\130\004\011\005\025\006\003\007\015\013" +
    "\042\014\007\015\036\016\017\017\032\023\012\024\030" +
    "\025\026\001\001\000\034\003\127\004\011\005\025\006" +
    "\003\007\015\013\042\014\007\015\036\016\017\017\032" +
    "\023\012\024\030\025\026\001\001\000\034\003\126\004" +
    "\011\005\025\006\003\007\015\013\042\014\007\015\036" +
    "\016\017\017\032\023\012\024\030\025\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\141\004\011\005\025\006\003\007\015\013" +
    "\042\014\007\015\036\016\017\017\032\023\012\024\030" +
    "\025\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\144\001\001\000\002\001\001\000\004\015\146" +
    "\001\001\000\002\001\001\000\004\015\150\001\001\000" +
    "\002\001\001\000\004\015\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\015\013\161\014\007\015\036\016\017\023\012" +
    "\024\030\025\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\166\012\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\015\010\174\013" +
    "\175\014\007\015\036\016\017\023\012\024\030\025\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\015\013\200\014\007\015\036\016\017\023\012\024\030" +
    "\025\026\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ErrorMsg errorMsg;
	public parser(java_cup.runtime.Scanner scan, ErrorMsg err) {
		this(scan);
		errorMsg = err;
	}
	public void syntax_error(java_cup.runtime.Symbol current) {
	    report_error("Syntax error (" + current.sym + ")", current);
	}

	public void report_error(String message, java_cup.runtime.Symbol info) {
		errorMsg.error(info.left, message);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  // An abbreviation for creating identifiers.
  static Identifier id(String s) {
    return new Identifier(s);
  }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // set_exp ::= LBRACE ltl_term_listN RBRACE 
            {
              Exp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermList list = (TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SetDef(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // set_exp ::= ltl_term LBRACK ltl_term RBRACK 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TupleSel(t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // set_exp ::= ltl_term IN ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.IN,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // set_exp ::= ltl_term NIN ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.NIN,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // set_exp ::= ltl_term DIFF ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.DIFF,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // set_exp ::= ltl_term UNION ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.UNION,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // set_exp ::= ltl_term SUBEQSET ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.SUBEQSET,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // set_exp ::= ltl_term NSUBSET ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.NSUBSET,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // set_exp ::= ltl_term SUBSET ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SetOp(sym.SUBSET,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_exp ::= ltl_term LEQ ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp(sym.LEQ,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_exp ::= ltl_term GEQ ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp(sym.GEQ,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rel_exp ::= ltl_term LT ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp(sym.LT,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rel_exp ::= ltl_term GT ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp(sym.GT,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_exp ::= ltl_term NEQ ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp(sym.NEQ,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rel_exp ::= ltl_term EQ ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOp(sym.EQ,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arith_exp ::= MINUS ltl_term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnArithOp(sym.MINUS,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arith_exp ::= ltl_term MOD ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinArithOp(sym.MOD,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arith_exp ::= ltl_term DIV ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinArithOp(sym.DIV,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arith_exp ::= ltl_term MULT ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinArithOp(sym.MULT,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arith_exp ::= ltl_term PLUS ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinArithOp(sym.PLUS,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arith_exp ::= ltl_term MINUS ltl_term 
            {
              Exp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinArithOp(sym.MINUS,t1,t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SentenceWPar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= set_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= rel_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= arith_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function ::= ID_LOWCASE 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // predicate ::= ID_UPCASE 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= ID_LOWCASE 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(id(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable ::= ID_UPCASE 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(id(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // constant ::= EMPTY 
            {
              Constant RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(e,sym.EMPTY); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // constant ::= STR 
            {
              Constant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(s,sym.STR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // constant ::= NUM 
            {
              Constant RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(n,sym.NUM); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constant ::= BOOL 
            {
              Constant RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(b,sym.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // quantifier ::= NEXISTS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.NEXISTS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // quantifier ::= EXISTS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.EXISTS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // quantifier ::= FORALL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(sym.FORALL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_set_list ::= var_set_list COMMA variable IN variable 
            {
              QuantList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		QuantList vl = (QuantList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SetMembOp s = new SetMembOp(v,e);
		   vl.addElement(s);
		   RESULT = vl; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_set_list ::= variable IN variable 
            {
              QuantList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SetMembOp s = new SetMembOp(v,e);
		   QuantList vl = new QuantList();
		   vl.addElement(s);
		   RESULT = vl; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_list ::= var_list COMMA variable 
            {
              QuantList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		QuantList vl = (QuantList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vl.addElement(v);
		   RESULT = vl; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_list ::= variable 
            {
              QuantList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 QuantList vl = new QuantList();
		   vl.addElement(v);
		   RESULT = vl; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // quant_var ::= var_set_list 
            {
              QuantList RESULT =null;
		int vslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vslright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QuantList vsl = (QuantList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vsl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quant_var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // quant_var ::= var_list 
            {
              QuantList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QuantList vl = (QuantList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quant_var",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compound_ltl_sentence ::= FLTL_WKUNTIL ltl_sentence 
            {
              LogicExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnLogicOp(l,sym.FLTL_WKUNTIL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compound_ltl_sentence ::= FLTL_UNTIL ltl_sentence 
            {
              LogicExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnLogicOp(l,sym.FLTL_UNTIL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compound_ltl_sentence ::= FLTL_NEXT ltl_sentence 
            {
              LogicExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnLogicOp(l,sym.FLTL_NEXT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compound_ltl_sentence ::= FLTL_SOMETIMES ltl_sentence 
            {
              LogicExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnLogicOp(l,sym.FLTL_SOMETIMES); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compound_ltl_sentence ::= FLTL_ALWAYS ltl_sentence 
            {
              LogicExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnLogicOp(l,sym.FLTL_ALWAYS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compound_ltl_sentence ::= LPAREN ltl_sentence RPAREN 
            {
              LogicExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LogicExp f = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SentenceWPar(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compound_ltl_sentence ::= quantifier quant_var SCOPE LPAREN ltl_sentence RPAREN 
            {
              LogicExp RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer q = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int qvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int qvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		QuantList qvar = (QuantList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LogicExp f = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new QuantLogicOp(q.intValue(),qvar,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compound_ltl_sentence ::= NOT ltl_sentence 
            {
              LogicExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnLogicOp(l,sym.NOT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_ltl_sentence ::= ltl_sentence EQUIV ltl_sentence 
            {
              LogicExp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LogicExp l1 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l2 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinLogicOp(l1,l2,sym.EQUIV); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compound_ltl_sentence ::= ltl_sentence IMP ltl_sentence 
            {
              LogicExp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LogicExp l1 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l2 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinLogicOp(l1,l2,sym.IMP); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_ltl_sentence ::= ltl_sentence AND ltl_sentence 
            {
              LogicExp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LogicExp l1 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l2 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinLogicOp(l1,l2,sym.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_ltl_sentence ::= ltl_sentence OR ltl_sentence 
            {
              LogicExp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LogicExp l1 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp l2 = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinLogicOp(l1,l2,sym.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_ltl_sentence",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ltl_term_listNR ::= ltl_term_listNR ltl_term COMMA 
            {
              TermList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermList list = (TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 list.addElement(t);
		   RESULT = list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term_listNR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ltl_term_listNR ::= 
            {
              TermList RESULT =null;
		 TermList list = new TermList();
		   RESULT = list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term_listNR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ltl_term_listN ::= ltl_term_listNR ltl_term 
            {
              TermList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermList list = (TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.addElement(t);
		   RESULT = list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term_listN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ltl_term_listN ::= 
            {
              TermList RESULT =null;
		 TermList list = new TermList();
		   RESULT = list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term_listN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ltl_term_list ::= ltl_term_list COMMA ltl_term 
            {
              TermList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermList list = (TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.addElement(t);
		   RESULT = list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ltl_term_list ::= ltl_term 
            {
              TermList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TermList list = new TermList();
		   list.addElement(t);
		   RESULT = list;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ltl_term ::= exp 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ltl_term ::= function LPAREN ltl_term_listN RPAREN 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier f = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermList l = (TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Function(f,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ltl_term ::= variable 
            {
              Term RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ltl_term ::= constant 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomic_ltl_sentence ::= ltl_term 
            {
              LogicExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_ltl_sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // atomic_ltl_sentence ::= predicate LPAREN ltl_term_list RPAREN 
            {
              LogicExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier p = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermList list = (TermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Predicate(p,list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomic_ltl_sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ltl_sentence ::= compound_ltl_sentence 
            {
              LogicExp RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp comp = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = comp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ltl_sentence ::= atomic_ltl_sentence 
            {
              LogicExp RESULT =null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp atom = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = atom; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_sentence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // logic_sentence ::= error 
            {
              LogicSentence RESULT =null;
		 /*parser.errorMsg.error(0,"");*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // logic_sentence ::= ltl_sentence 
            {
              LogicSentence RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicExp exp = (LogicExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicSentence(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= logic_sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LogicSentence start_val = (LogicSentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

