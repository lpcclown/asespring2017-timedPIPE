
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 13 13:14:51 EST 2016
//----------------------------------------------------

package pipe.core.expression.statespec.parser;

import formula.parser.ErrorMsg;
import pipe.core.expression.statespec.grammer.*;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;

import java.util.*;
import java.io.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Sat Feb 13 13:14:51 EST 2016
 */
public class parser extends java_cup.runtime.lr_parser {

  /**
   * Default constructor.
   */
  public parser() {
    super();
  }

  /**
   * Constructor which sets the default scanner.
   */
  public parser(java_cup.runtime.Scanner s) {
    super(s);
  }

  /**
   * Constructor which sets the default scanner.
   */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    super(s, sf);
  }

  /**
   * Production table.
   */
  protected static final short _production_table[][] =
      unpackFromStrings(new String[]{
          "\000\007\000\002\002\004\000\002\002\003\000\002\003" +
              "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
              "\000\002\003\006"});

  /**
   * Access to production table.
   */
  public short[][] production_table() {
    return _production_table;
  }

  /**
   * Parse-action table.
   */
  protected static final short[][] _action_table =
      unpackFromStrings(new String[]{
          "\000\021\000\010\006\004\010\007\011\005\001\002\000" +
              "\010\006\004\010\007\011\005\001\002\000\004\010\020" +
              "\001\002\000\004\002\017\001\002\000\010\006\004\010" +
              "\007\011\005\001\002\000\010\002\000\004\011\005\012" +
              "\001\002\000\010\006\004\010\007\011\005\001\002\000" +
              "\010\006\004\010\007\011\005\001\002\000\012\002\ufffd" +
              "\004\ufffd\005\ufffd\007\ufffd\001\002\000\012\002\ufffe\004" +
              "\ufffe\005\012\007\ufffe\001\002\000\010\004\011\005\012" +
              "\007\016\001\002\000\012\002\ufffc\004\ufffc\005\ufffc\007" +
              "\ufffc\001\002\000\004\002\001\001\002\000\004\011\021" +
              "\001\002\000\004\007\022\001\002\000\012\002\ufffb\004" +
              "\ufffb\005\ufffb\007\ufffb\001\002\000\012\002\uffff\004\uffff" +
              "\005\uffff\007\uffff\001\002"});

  /**
   * Access to parse-action table.
   */
  public short[][] action_table() {
    return _action_table;
  }

  /**
   * <code>reduce_goto</code> table.
   */
  protected static final short[][] _reduce_table =
      unpackFromStrings(new String[]{
          "\000\021\000\006\002\005\003\007\001\001\000\004\003" +
              "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
              "\003\014\001\001\000\002\001\001\000\004\003\013\001" +
              "\001\000\004\003\012\001\001\000\002\001\001\000\002" +
              "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
              "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
              "\000\002\001\001"});

  /**
   * Access to <code>reduce_goto</code> table.
   */
  public short[][] reduce_table() {
    return _reduce_table;
  }

  /**
   * Instance of action encapsulation class.
   */
  protected CUP$parser$actions action_obj;

  /**
   * Action encapsulation object initializer.
   */
  protected void init_actions() {
    action_obj = new CUP$parser$actions(this);
  }

  /**
   * Invoke a user supplied parse action.
   */
  public java_cup.runtime.Symbol do_action(
      int act_num,
      java_cup.runtime.lr_parser parser,
      java.util.Stack stack,
      int top)
      throws java.lang.Exception {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /**
   * Indicates start state.
   */
  public int start_state() {
    return 0;
  }

  /**
   * Indicates start production.
   */
  public int start_production() {
    return 0;
  }

  /**
   * <code>EOF</code> Symbol index.
   */
  public int EOF_sym() {
    return 0;
  }

  /**
   * <code>error</code> Symbol index.
   */
  public int error_sym() {
    return 1;
  }


  private ErrorMsg mErrorCollector;

  public parser(final java_cup.runtime.Scanner pScanner, final ErrorMsg pErrorCollector) {
    this(pScanner);
    mErrorCollector = pErrorCollector;
  }

  public void syntax_error(java_cup.runtime.Symbol current) {
    mErrorCollector.error(current.left, String.format("Syntax error: %s", current));
  }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser$actions {
  private final parser parser;

  /**
   * Constructor
   */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /**
   * Method with the actual generated action code.
   */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
      int CUP$parser$act_num,
      java_cup.runtime.lr_parser CUP$parser$parser,
      java.util.Stack CUP$parser$stack,
      int CUP$parser$top)
      throws java.lang.Exception {
      /* Symbol object for return from actions */
    java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
    switch (CUP$parser$act_num) {
          /*. . . . . . . . . . . . . . . . . . . .*/
      case 6: // expression ::= STR LPAREN STR RPAREN
      {
        Expression RESULT = null;
        int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
        int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
        String p = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
        int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
        int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
        String v = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
        RESULT = new StateExpression(p, v);
        CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
      return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
      case 5: // expression ::= LPAREN expression RPAREN
      {
        Expression RESULT = null;
        int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
        int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
        Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
        RESULT = new Compound(e);
        CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
      return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
      case 4: // expression ::= expression OR expression
      {
        Expression RESULT = null;
        int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
        int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
        Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
        int oleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
        int oright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
        Object o = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
        int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
        int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
        Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
        RESULT = new Disjunction(e1, e2);
        CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
      return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
      case 3: // expression ::= expression AND expression
      {
        Expression RESULT = null;
        int e1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
        int e1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
        Expression e1 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
        int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
        int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
        Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
        int e2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
        int e2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
        Expression e2 = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
        RESULT = new Conjunction(e1, e2);
        CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
      return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
      case 2: // expression ::= NOT expression
      {
        Expression RESULT = null;
        int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
        int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
        Object n = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
        int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
        int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
        Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
        RESULT = new Inversion(e);
        CUP$parser$result = parser.getSymbolFactory().newSymbol("expression", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
      return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
      case 1: // sentence ::= expression
      {
        Sentence RESULT = null;
        int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
        int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
        Expression e = (Expression) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
        RESULT = new Sentence(e);
        CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
      return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
      case 0: // $START ::= sentence EOF
      {
        Object RESULT = null;
        int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
        int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
        Sentence start_val = (Sentence) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
        RESULT = start_val;
        CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
      }
          /* ACCEPT */
      CUP$parser$parser.done_parsing();
      return CUP$parser$result;

          /* . . . . . .*/
      default:
        throw new Exception(
            "Invalid action number found in internal parse table");

    }
  }
}

