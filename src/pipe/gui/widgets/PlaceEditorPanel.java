package pipe.gui.widgets;

import pipe.dataLayer.*;
import pipe.gui.CreateGui;
import pipe.gui.GuiView;

import javax.swing.*;
import javax.swing.event.ChangeListener;
import javax.xml.stream.events.Characters;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.event.FocusEvent;
import java.util.ArrayList;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PlaceEditorPanel
    extends javax.swing.JPanel {

  Place place;
  Boolean attributesVisible;
  String name;
  int capacity;
  DataLayer pnmlData;
  GuiView view;
  JRootPane rootPane;
  DefaultListModel dml;


  /**
   * Creates new form PlaceEditor
   */
  public PlaceEditorPanel(JRootPane _rootPane, Place _place,
                          DataLayer _pnmlData, GuiView _view) {
    place = _place;
    pnmlData = _pnmlData;
    view = _view;
    attributesVisible = place.getAttributesVisible();

    name = place.getName();
    capacity = place.getCapacity();

    rootPane = _rootPane;

    initComponents();
    rootPane.setDefaultButton(AddButton);


  }

  private void initializeTextToNewToken(boolean pIsPlaceHolder) {
    if (pIsPlaceHolder) {
      this.newtoken.setForeground(Color.gray);
      newtoken.setText(getNewTokenPlaceHolderText());//to be modified;
    }
    else {
      newtoken.setForeground(Color.BLACK);
      newtoken.setText("");
    }
  }


  private void inittype() {
    dml.addElement(String.format("T:%s", place.getDataType() == null ? "" : place.getDataType().getStringRepresentation()));
  }

  private void initToken() {
    if (place.getDataType() != null && place.getToken() != null) {
      for (Token token : place.getToken().listToken) {
        dml.addElement(token.displayToken());
      }
    }
  }


  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;


    dml = new DefaultListModel();
    placeEditorPanel = new javax.swing.JPanel();
    nameLabel = new javax.swing.JLabel();
    nameTextField = new javax.swing.JTextField();
    capacityLabel = new javax.swing.JLabel();
    capacityTextField = new javax.swing.JTextField();
    tokenLabel = new javax.swing.JLabel();
    tokenlistLabel = new javax.swing.JLabel();
    newtoken = new javax.swing.JTextArea();


    newtokenlist = new javax.swing.JList(dml);
    markingLabel = new javax.swing.JLabel();
    markingSpinner = new javax.swing.JSpinner();
    markingSpinner.setModel(new SpinnerNumberModel(place.getCurrentMarking(), 0, Integer.MAX_VALUE, 1));

    attributesCheckBox = new javax.swing.JCheckBox();
    buttonPanel = new javax.swing.JPanel();
    AddButton = new javax.swing.JButton();
    DelButton = new javax.swing.JButton();

    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());

    placeEditorPanel.setLayout(new java.awt.GridBagLayout());

    placeEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Place Editor"));
    nameLabel.setText("Name:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(nameLabel, gridBagConstraints);

    nameTextField.setText(place.getName());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(nameTextField, gridBagConstraints);

    capacityLabel.setText("Capacity");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(capacityLabel, gridBagConstraints);

    capacityTextField.setText(Integer.toString(place.getCapacity()));
    if (place.getDataType() != null && !place.getDataType().getPow()) {
      capacityTextField.setText("1");
      capacityTextField.setEditable(false);
      capacityTextField.setBackground(java.awt.Color.GRAY);
    }
    else {
      place.setCapacity(place.getToken().getTokenCount());
      capacityTextField.setText(Integer.toString(place.getCapacity()));
    }
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 1;
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(capacityTextField, gridBagConstraints);

    markingLabel.setText("Marking:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(markingLabel, gridBagConstraints);

    tokenLabel.setText("[Add New Token]");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(tokenLabel, gridBagConstraints);


    tokenlistLabel.setText("[Token List]");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(tokenlistLabel, gridBagConstraints);

    newtoken.setPreferredSize(new java.awt.Dimension(150, 50));
    newtoken.setAutoscrolls(true);
    newtoken.setRows(7);
    newtoken.setLineWrap(true);

    initializeTextToNewToken(true);
    newtoken.addFocusListener(new java.awt.event.FocusListener() {
      public void focusGained(FocusEvent e) {
        if (newtoken.getText().trim().equals(getNewTokenPlaceHolderText())) {
          initializeTextToNewToken(false);
        }
      }

      public void focusLost(FocusEvent e) {
        if (newtoken.getText().trim().equals("")) {
          initializeTextToNewToken(true);
        }
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(newtoken, gridBagConstraints);

//      newtokenlist.setPreferredSize(new java.awt.Dimension(150,104));
    newtokenlist.setBackground(Color.WHITE);
    newtokenlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    inittype();
    initToken();
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    JScrollPane scrollNewTokenListPane = new JScrollPane();
    scrollNewTokenListPane.getViewport().add(newtokenlist);
    placeEditorPanel.add(scrollNewTokenListPane, gridBagConstraints);


    attributesCheckBox.setSelected(place.getAttributesVisible());
    attributesCheckBox.setText("Show place attributes");
    attributesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    attributesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    placeEditorPanel.add(attributesCheckBox, gridBagConstraints);


    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
    add(placeEditorPanel, gridBagConstraints);

    buttonPanel.setLayout(new java.awt.FlowLayout());

    AddButton.setText("Add Token");
    AddButton.setMaximumSize(new java.awt.Dimension(75, 25));
    AddButton.setMinimumSize(new java.awt.Dimension(75, 25));
    AddButton.setPreferredSize(new java.awt.Dimension(75, 25));
    AddButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        AddButtonHandler(evt);
      }
    });

    buttonPanel.add(AddButton, gridBagConstraints);

    cancelButton.setText("Fill Tokens");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonHandler(evt);
      }
    });
    buttonPanel.add(cancelButton, gridBagConstraints);

    DelButton.setText("Delete");
    DelButton.setMaximumSize(new java.awt.Dimension(75, 25));
    DelButton.setMinimumSize(new java.awt.Dimension(75, 25));
    DelButton.setPreferredSize(new java.awt.Dimension(75, 25));
    DelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        DelButtonHandler(evt);
      }
    });
    buttonPanel.add(DelButton, gridBagConstraints);


    okButton.setText("OK");
    okButton.setMaximumSize(new java.awt.Dimension(75, 25));
    okButton.setMinimumSize(new java.awt.Dimension(75, 25));
    okButton.setPreferredSize(new java.awt.Dimension(75, 25));
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonHandler(evt);
      }
    });
    okButton.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        okButtonKeyPressed(evt);
      }
    });


    buttonPanel.add(okButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.CENTER;
    add(buttonPanel, gridBagConstraints);

  }// </editor-fold>//GEN-END:initComponents


  ChangeListener changeListener = new javax.swing.event.ChangeListener() {
    public void stateChanged(javax.swing.event.ChangeEvent evt) {
      JSpinner spinner = (JSpinner) evt.getSource();
      JSpinner.NumberEditor numberEditor =
          ((JSpinner.NumberEditor) spinner.getEditor());
      numberEditor.getTextField().setBackground(new Color(255, 255, 255));
      spinner.removeChangeListener(this);
    }
  };


  private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyPressed
    if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
      doOK();
    }
  }//GEN-LAST:event_okButtonKeyPressed

  private void doadd()
  {
    DataType datatype = place.getDataType();
    if (datatype == null) {
      JOptionPane.showMessageDialog(CreateGui.getApp(), "Please specify datatype for place first", "", JOptionPane.ERROR_MESSAGE);
      return;
    }

    Pattern pattern = Pattern.compile("\\[(.*)\\](\\n?)");
    Matcher matcher = pattern.matcher(newtoken.getText());
    while(matcher.find()) {
      String[] elements = matcher.group(1).split(",");
      if (elements.length != datatype.getTypes().size()) {
        JOptionPane.showMessageDialog(CreateGui.getApp(), String.format("Number of elements mismatched for %s. It will be ignored.", matcher.group(1)), "", JOptionPane.ERROR_MESSAGE);
        continue;
      }
      BasicType[] tokenElements = new BasicType[elements.length];
      for (int i = 0; i< elements.length; i++) {
        BasicType basicType = new BasicType(datatype.getTypebyIndex(i), elements[i]);
        tokenElements[i] = basicType;
      }
      place.addToken(tokenElements);
    }

  }


  private void doDel() {
    int index = newtokenlist.getSelectedIndex();
    if (index != 0) {
      dml.remove(index);
      place.token.listToken.remove(index - 1);
    }
  }

  private void doOK() {

//	   doadd();
    view.getUndoManager().newEdit(); // new "transaction""

    String newName = nameTextField.getText();
    if (!newName.equals(name)) {
      view.getUndoManager().addEdit(place.setPNObjectName(newName));
    }

    String newCapacity = capacityTextField.getText();
    if (Integer.parseInt(newCapacity) != capacity) {
      view.getUndoManager().addEdit(place.setCapacity(Integer.parseInt(newCapacity)));
    }

    if (attributesVisible != attributesCheckBox.isSelected()) {
      place.toggleAttributesVisible();
    }

    place.repaint();
    exit();
  }

  private void AddButtonHandler(java.awt.event.ActionEvent evt) {
    if (!place.getDataType().getPow() && place.getToken().getTokenCount() > 0) {
      JOptionPane.showMessageDialog(CreateGui.getApp(), "Token count exceeds capacity!", "Capacity Limit Violation", JOptionPane.ERROR_MESSAGE);
      return;
    }
    doadd();
    if (place.getDataType().getPow()) {
      int cap = place.getCapacity();
      place.setCapacity(cap + 1);
    }
    capacityTextField.setText(Integer.toString(place.getCapacity()));
    dml.clear();
    inittype();
    initToken();
    initializeTextToNewToken(true);
  }

  private void DelButtonHandler(java.awt.event.ActionEvent evt) {
    doDel();
  }

  private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
    doOK();
  }//GEN-LAST:event_okButtonHandler


  private void exit() {
    rootPane.getParent().setVisible(false);
  }


  private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
    if (!place.getDataType().getPow()) {
      return;
    }

    String value = JOptionPane.showInputDialog(this, "Enter the number of tokens you want to add.", "Number of tokens", JOptionPane.OK_CANCEL_OPTION);
    int numberOfTokens = Integer.parseInt(value);
    Random random = new Random(System.nanoTime());
    for (int index = 0; index < numberOfTokens; index++) {
      Token token = place.addToken(generateTokens(random));
      dml.addElement(token.displayToken());
      place.setCapacity(place.getToken().getTokenCount());
      capacityTextField.setText(Integer.toString(place.getCapacity()));
    }
  }//GEN-LAST:event_cancelButtonHandler

  private BasicType[] generateTokens(final Random pRandom) {
    DataType dataType = place.getDataType();
    BasicType[] tokenElements = new BasicType[dataType.getTypes().size()];
    for (int i = 0; i < tokenElements.length; i++) {
      if (dataType.getTypes().get(i).equals(BasicType.TYPES[0])) {
        tokenElements[i] = new BasicType(0, pRandom.nextInt(1000), null);
      }
      else {
        tokenElements[i] = new BasicType(1, 0, toAlpha(pRandom.nextInt(1000)));
      }
    }

    return tokenElements;
  }

  private String toAlpha(final int pInt) {
    String temp = Integer.toString(pInt);
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < temp.length(); i++) {
      char c = temp.charAt(i);
      sb.append((char) (c + 17));
    }
    return sb.toString();
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox attributesCheckBox;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JLabel markingLabel;
  private javax.swing.JLabel tokenLabel;
  private javax.swing.JLabel tokenlistLabel;
  private javax.swing.JSpinner markingSpinner;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JTextField nameTextField;
  private javax.swing.JTextArea newtoken;
  private javax.swing.JList newtokenlist;
  private javax.swing.JButton okButton;
  private javax.swing.JButton AddButton;
  private javax.swing.JButton DelButton;
  private javax.swing.JPanel placeEditorPanel;
  private javax.swing.JLabel capacityLabel;
  private javax.swing.JTextField capacityTextField;

  public String getNewTokenPlaceHolderText() {
    if (place.getDataType() != null) {
      return String.format("Input Format:%n[%s]", place.getDataType().getJoinedTypes());
    }

    return "";
  }
  // End of variables declaration//GEN-END:variables

}
