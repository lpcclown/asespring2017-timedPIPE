
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 17 23:53:14 EDT 2016
//----------------------------------------------------

package formula.parser;

import formula.absyntree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 17 23:53:14 EDT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\006\012\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\026\005" +
    "\000\002\026\006\000\002\010\004\000\002\011\004\000" +
    "\002\012\002\000\002\012\004\000\002\013\003\000\002" +
    "\013\005\000\002\013\003\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\007\000\002\016\011\000" +
    "\002\017\003\000\002\017\006\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\025\003\000" +
    "\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\034\006\012\020\032\025\005\026\033\027" +
    "\007\040\017\041\020\046\016\047\031\050\037\051\024" +
    "\052\021\053\035\001\002\000\014\002\000\004\122\005" +
    "\123\007\120\010\117\001\002\000\004\052\uffce\001\002" +
    "\000\064\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\023\ufff4\024\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\035\ufff4\037\ufff4\042\ufff4\044\ufff4\045\ufff4" +
    "\001\002\000\004\052\uffcc\001\002\000\020\002\ufffe\004" +
    "\ufffe\005\ufffe\007\ufffe\010\ufffe\037\ufffe\042\ufffe\001\002" +
    "\000\064\002\uffe9\004\uffe9\005\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\024\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\035\uffe9\037\uffe9\042\uffe9\044\uffe9\045\uffe9" +
    "\001\002\000\034\006\012\020\032\025\005\026\033\027" +
    "\007\040\017\041\020\046\016\047\031\050\037\051\024" +
    "\052\021\053\035\001\002\000\064\002\ufff0\004\ufff0\005" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\037\ufff0" +
    "\042\ufff0\044\ufff0\045\ufff0\001\002\000\020\002\ufffd\004" +
    "\ufffd\005\ufffd\007\ufffd\010\ufffd\037\ufffd\042\ufffd\001\002" +
    "\000\064\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\022\ufff1\023\ufff1\024\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\035\ufff1\037\ufff1\042\ufff1\044\ufff1\045\ufff1" +
    "\001\002\000\064\002\uffc9\004\uffc9\005\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\035\uffc9\037\uffc9\042\uffc9\044\uffc9" +
    "\045\uffc9\001\002\000\034\006\012\020\032\025\005\026" +
    "\033\027\007\040\017\041\020\046\016\047\031\050\037" +
    "\051\024\052\021\053\035\001\002\000\026\020\032\036" +
    "\146\040\040\041\020\046\016\047\031\050\037\051\024" +
    "\052\021\053\035\001\002\000\070\002\uffd1\004\uffd1\005" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\130" +
    "\037\uffd1\040\135\042\uffd1\044\uffd1\045\uffd1\001\002\000" +
    "\004\002\134\001\002\000\064\002\ufff2\004\ufff2\005\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\035\ufff2\037\ufff2\042" +
    "\ufff2\044\ufff2\045\ufff2\001\002\000\064\002\uffc7\004\uffc7" +
    "\005\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7\037" +
    "\uffc7\042\uffc7\044\uffc7\045\uffc7\001\002\000\064\002\uffe5" +
    "\004\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035" +
    "\uffe5\037\uffe5\042\uffe5\044\uffe5\045\uffe5\001\002\000\064" +
    "\002\uffe7\004\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\035\uffe7\037\uffe7\042\uffe7\044\uffe7\045\uffe7\001\002" +
    "\000\004\052\105\001\002\000\056\002\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\010\ufffa\011\050\012\047\013\053\014\056" +
    "\015\057\016\060\017\051\020\042\022\055\023\046\024" +
    "\052\030\044\031\043\032\045\033\054\037\ufffa\042\ufffa" +
    "\001\002\000\064\002\uffc8\004\uffc8\005\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\035\uffc8\037\uffc8\042\uffc8\044\uffc8" +
    "\045\uffc8\001\002\000\024\020\032\040\040\041\020\046" +
    "\016\047\031\050\037\051\024\052\021\053\035\001\002" +
    "\000\004\052\uffcd\001\002\000\064\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3\037\ufff3" +
    "\042\ufff3\044\ufff3\045\ufff3\001\002\000\064\002\uffc6\004" +
    "\uffc6\005\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6" +
    "\037\uffc6\042\uffc6\044\uffc6\045\uffc6\001\002\000\020\002" +
    "\uffff\004\uffff\005\uffff\007\uffff\010\uffff\037\uffff\042\uffff" +
    "\001\002\000\064\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\035\uffc5\037\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\001\002\000\024\020\032\040\040\041\020\046" +
    "\016\047\031\050\037\051\024\052\021\053\035\001\002" +
    "\000\064\002\uffd7\004\uffd7\005\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\022\uffd7\023\uffd7\024\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\035\uffd7\037\uffd7\042\uffd7\044\uffd7\045\uffd7" +
    "\001\002\000\024\020\032\040\040\041\020\046\016\047" +
    "\031\050\037\051\024\052\021\053\035\001\002\000\024" +
    "\020\032\040\040\041\020\046\016\047\031\050\037\051" +
    "\024\052\021\053\035\001\002\000\024\020\032\040\040" +
    "\041\020\046\016\047\031\050\037\051\024\052\021\053" +
    "\035\001\002\000\024\020\032\040\040\041\020\046\016" +
    "\047\031\050\037\051\024\052\021\053\035\001\002\000" +
    "\024\020\032\040\040\041\020\046\016\047\031\050\037" +
    "\051\024\052\021\053\035\001\002\000\024\020\032\040" +
    "\040\041\020\046\016\047\031\050\037\051\024\052\021" +
    "\053\035\001\002\000\024\020\032\040\040\041\020\046" +
    "\016\047\031\050\037\051\024\052\021\053\035\001\002" +
    "\000\024\020\032\040\040\041\020\046\016\047\031\050" +
    "\037\051\024\052\021\053\035\001\002\000\024\020\032" +
    "\040\040\041\020\046\016\047\031\050\037\051\024\052" +
    "\021\053\035\001\002\000\024\020\032\040\040\041\020" +
    "\046\016\047\031\050\037\051\024\052\021\053\035\001" +
    "\002\000\024\020\032\040\040\041\020\046\016\047\031" +
    "\050\037\051\024\052\021\053\035\001\002\000\024\020" +
    "\032\040\040\041\020\046\016\047\031\050\037\051\024" +
    "\052\021\053\035\001\002\000\024\020\032\040\040\041" +
    "\020\046\016\047\031\050\037\051\024\052\021\053\035" +
    "\001\002\000\024\020\032\040\040\041\020\046\016\047" +
    "\031\050\037\051\024\052\021\053\035\001\002\000\024" +
    "\020\032\040\040\041\020\046\016\047\031\050\037\051" +
    "\024\052\021\053\035\001\002\000\064\002\uffdf\004\uffdf" +
    "\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\051\020\042\022\055\023\046" +
    "\024\052\030\044\031\043\032\045\033\054\035\uffdf\037" +
    "\uffdf\042\uffdf\044\uffdf\045\uffdf\001\002\000\064\002\uffe0" +
    "\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\051\020\042\022\055" +
    "\023\046\024\052\030\044\031\043\032\045\033\054\035" +
    "\uffe0\037\uffe0\042\uffe0\044\uffe0\045\uffe0\001\002\000\064" +
    "\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\051\020\042" +
    "\022\055\023\046\024\052\030\044\031\043\032\045\033" +
    "\054\035\uffe1\037\uffe1\042\uffe1\044\uffe1\045\uffe1\001\002" +
    "\000\064\002\uffda\004\uffda\005\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\022\uffda\023\uffda\024\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\035\uffda\037\uffda\042\uffda\044\uffda\045\uffda" +
    "\001\002\000\064\002\uffd5\004\uffd5\005\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\051\020\042\022\055\023\046\024\052\030\044\031" +
    "\043\032\uffd5\033\uffd5\035\uffd5\037\uffd5\042\uffd5\044\uffd5" +
    "\045\uffd5\001\002\000\064\002\uffe2\004\uffe2\005\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\051\020\042\022\055\023\046\024\052\030" +
    "\044\031\043\032\045\033\054\035\uffe2\037\uffe2\042\uffe2" +
    "\044\uffe2\045\uffe2\001\002\000\064\002\uffd9\004\uffd9\005" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\037\uffd9" +
    "\042\uffd9\044\uffd9\045\uffd9\001\002\000\064\002\uffdb\004" +
    "\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\055\023" +
    "\uffdb\024\052\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb" +
    "\037\uffdb\042\uffdb\044\uffdb\045\uffdb\001\002\000\064\002" +
    "\uffe4\004\uffe4\005\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\053\014\056\015\057\016\060\017\051\020\042\022" +
    "\055\023\046\024\052\030\044\031\043\032\045\033\054" +
    "\035\uffe4\037\uffe4\042\uffe4\044\uffe4\045\uffe4\001\002\000" +
    "\064\002\uffe3\004\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\053\014\056\015\057\016\060\017\051\020" +
    "\042\022\055\023\046\024\052\030\044\031\043\032\045" +
    "\033\054\035\uffe3\037\uffe3\042\uffe3\044\uffe3\045\uffe3\001" +
    "\002\000\064\002\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\022\055\023\uffd8\024\052\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\035\uffd8\037\uffd8\042\uffd8\044\uffd8\045" +
    "\uffd8\001\002\000\064\002\uffd6\004\uffd6\005\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\051\020\042\022\055\023\046\024\052\030\044" +
    "\031\043\032\uffd6\033\054\035\uffd6\037\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\001\002\000\064\002\uffde\004\uffde\005\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\051\020\042\022\055\023\046\024\052" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde\037\uffde\042" +
    "\uffde\044\uffde\045\uffde\001\002\000\064\002\uffdd\004\uffdd" +
    "\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\051\020\042\022\055\023\046" +
    "\024\052\030\044\031\uffdd\032\uffdd\033\uffdd\035\uffdd\037" +
    "\uffdd\042\uffdd\044\uffdd\045\uffdd\001\002\000\064\002\uffdc" +
    "\004\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\055" +
    "\023\uffdc\024\052\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035" +
    "\uffdc\037\uffdc\042\uffdc\044\uffdc\045\uffdc\001\002\000\052" +
    "\004\uffe9\005\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\037" +
    "\104\001\002\000\052\004\uffe7\005\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\037\103\001\002\000\040\011\050\012" +
    "\047\013\053\014\056\015\057\016\060\017\051\020\042" +
    "\022\055\023\046\024\052\030\044\031\043\032\045\033" +
    "\054\001\002\000\064\002\uffe6\004\uffe6\005\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\035\uffe6\037\uffe6\042\uffe6\044" +
    "\uffe6\045\uffe6\001\002\000\064\002\uffe8\004\uffe8\005\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\037\uffe8\042" +
    "\uffe8\044\uffe8\045\uffe8\001\002\000\006\030\uffcf\031\uffcf" +
    "\001\002\000\006\030\107\031\111\001\002\000\004\052" +
    "\uffcb\001\002\000\004\052\112\001\002\000\004\052\uffca" +
    "\001\002\000\010\034\uffd1\036\130\043\uffd1\001\002\000" +
    "\004\043\114\001\002\000\004\040\115\001\002\000\034" +
    "\006\012\020\032\025\005\026\033\027\007\040\017\041" +
    "\020\046\016\047\031\050\037\051\024\052\021\053\035" +
    "\001\002\000\014\004\122\005\123\007\120\010\117\037" +
    "\121\001\002\000\034\006\012\020\032\025\005\026\033" +
    "\027\007\040\017\041\020\046\016\047\031\050\037\051" +
    "\024\052\021\053\035\001\002\000\034\006\012\020\032" +
    "\025\005\026\033\027\007\040\017\041\020\046\016\047" +
    "\031\050\037\051\024\052\021\053\035\001\002\000\020" +
    "\002\ufff5\004\ufff5\005\ufff5\007\ufff5\010\ufff5\037\ufff5\042" +
    "\ufff5\001\002\000\034\006\012\020\032\025\005\026\033" +
    "\027\007\040\017\041\020\046\016\047\031\050\037\051" +
    "\024\052\021\053\035\001\002\000\034\006\012\020\032" +
    "\025\005\026\033\027\007\040\017\041\020\046\016\047" +
    "\031\050\037\051\024\052\021\053\035\001\002\000\020" +
    "\002\ufff8\004\ufff8\005\ufff8\007\120\010\117\037\ufff8\042" +
    "\ufff8\001\002\000\020\002\ufff9\004\ufff9\005\123\007\120" +
    "\010\117\037\ufff9\042\ufff9\001\002\000\020\002\ufff7\004" +
    "\ufff7\005\ufff7\007\ufff7\010\ufff7\037\ufff7\042\ufff7\001\002" +
    "\000\020\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\037" +
    "\ufff6\042\ufff6\001\002\000\004\051\131\001\002\000\004" +
    "\035\uffc4\001\002\000\004\035\133\001\002\000\070\002" +
    "\uffd0\004\uffd0\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\037\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\001\002\000\004\002\001\001\002\000\026\020\032" +
    "\037\136\040\040\041\020\046\016\047\031\050\037\051" +
    "\024\052\021\053\035\001\002\000\064\002\uffef\004\uffef" +
    "\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef\023\uffef" +
    "\024\uffef\030\uffef\031\uffef\032\uffef\033\uffef\035\uffef\037" +
    "\uffef\042\uffef\044\uffef\045\uffef\001\002\000\004\037\145" +
    "\001\002\000\046\011\050\012\047\013\053\014\056\015" +
    "\057\016\060\017\051\020\042\022\055\023\046\024\052" +
    "\030\044\031\043\032\045\033\054\035\uffeb\037\uffeb\044" +
    "\uffeb\001\002\000\010\035\uffed\037\uffed\044\142\001\002" +
    "\000\024\020\032\040\040\041\020\046\016\047\031\050" +
    "\037\051\024\052\021\053\035\001\002\000\010\035\uffea" +
    "\037\uffea\044\uffea\001\002\000\046\011\050\012\047\013" +
    "\053\014\056\015\057\016\060\017\051\020\042\022\055" +
    "\023\046\024\052\030\044\031\043\032\045\033\054\035" +
    "\uffec\037\uffec\044\uffec\001\002\000\064\002\uffee\004\uffee" +
    "\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee" +
    "\024\uffee\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\037" +
    "\uffee\042\uffee\044\uffee\045\uffee\001\002\000\024\020\032" +
    "\040\040\041\020\046\016\047\031\050\037\051\024\052" +
    "\021\053\035\001\002\000\044\011\050\012\047\013\053" +
    "\014\056\015\057\016\060\017\051\020\042\022\055\023" +
    "\046\024\052\030\044\031\043\032\045\033\054\042\151" +
    "\045\150\001\002\000\004\052\112\001\002\000\064\002" +
    "\uffd4\004\uffd4\005\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\037\uffd4\042\uffd4\044\uffd4\045\uffd4\001\002\000" +
    "\004\034\153\001\002\000\034\006\012\020\032\025\005" +
    "\026\033\027\007\040\017\041\020\046\016\047\031\050" +
    "\037\051\024\052\021\053\035\001\002\000\014\004\122" +
    "\005\123\007\120\010\117\042\155\001\002\000\064\002" +
    "\uffd2\004\uffd2\005\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\035\uffd2\037\uffd2\042\uffd2\044\uffd2\045\uffd2\001\002\000" +
    "\004\035\157\001\002\000\004\042\160\001\002\000\064" +
    "\002\uffd3\004\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\035\uffd3\037\uffd3\042\uffd3\044\uffd3\045\uffd3\001\002" +
    "\000\014\004\122\005\123\007\120\010\117\037\162\001" +
    "\002\000\020\002\ufffc\004\ufffc\005\ufffc\007\ufffc\010\ufffc" +
    "\037\ufffc\042\ufffc\001\002\000\020\002\ufffb\004\ufffb\005" +
    "\ufffb\007\120\010\117\037\ufffb\042\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\040\002\021\003\003\004\035\005\007\006" +
    "\013\007\027\013\014\014\025\015\010\016\024\017\033" +
    "\021\026\023\005\025\022\026\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\162\004" +
    "\035\005\007\006\013\007\027\013\014\014\025\015\010" +
    "\016\024\017\033\021\026\023\005\025\022\026\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\160\004\035\005\007\006" +
    "\013\007\027\013\014\014\100\015\077\016\024\017\033" +
    "\021\026\023\005\025\022\026\012\001\001\000\024\007" +
    "\146\013\014\014\025\015\010\016\024\017\033\023\005" +
    "\025\022\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\040\013\014\014\025" +
    "\015\010\016\024\017\033\023\005\025\022\026\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\101\013" +
    "\014\014\100\015\077\016\024\017\033\023\005\025\022" +
    "\026\012\001\001\000\002\001\001\000\024\007\076\013" +
    "\014\014\025\015\010\016\024\017\033\023\005\025\022" +
    "\026\012\001\001\000\024\007\075\013\014\014\025\015" +
    "\010\016\024\017\033\023\005\025\022\026\012\001\001" +
    "\000\024\007\074\013\014\014\025\015\010\016\024\017" +
    "\033\023\005\025\022\026\012\001\001\000\024\007\073" +
    "\013\014\014\025\015\010\016\024\017\033\023\005\025" +
    "\022\026\012\001\001\000\024\007\072\013\014\014\025" +
    "\015\010\016\024\017\033\023\005\025\022\026\012\001" +
    "\001\000\024\007\071\013\014\014\025\015\010\016\024" +
    "\017\033\023\005\025\022\026\012\001\001\000\024\007" +
    "\070\013\014\014\025\015\010\016\024\017\033\023\005" +
    "\025\022\026\012\001\001\000\024\007\067\013\014\014" +
    "\025\015\010\016\024\017\033\023\005\025\022\026\012" +
    "\001\001\000\024\007\066\013\014\014\025\015\010\016" +
    "\024\017\033\023\005\025\022\026\012\001\001\000\024" +
    "\007\065\013\014\014\025\015\010\016\024\017\033\023" +
    "\005\025\022\026\012\001\001\000\024\007\064\013\014" +
    "\014\025\015\010\016\024\017\033\023\005\025\022\026" +
    "\012\001\001\000\024\007\063\013\014\014\025\015\010" +
    "\016\024\017\033\023\005\025\022\026\012\001\001\000" +
    "\024\007\062\013\014\014\025\015\010\016\024\017\033" +
    "\023\005\025\022\026\012\001\001\000\024\007\061\013" +
    "\014\014\025\015\010\016\024\017\033\023\005\025\022" +
    "\026\012\001\001\000\024\007\060\013\014\014\025\015" +
    "\010\016\024\017\033\023\005\025\022\026\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\107\001\001\000" +
    "\002\001\001\000\004\017\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\115\004\035\005\007\006\013\007\027\013\014" +
    "\014\025\015\010\016\024\017\033\021\026\023\005\025" +
    "\022\026\012\001\001\000\002\001\001\000\036\003\126" +
    "\004\035\005\007\006\013\007\027\013\014\014\025\015" +
    "\010\016\024\017\033\021\026\023\005\025\022\026\012" +
    "\001\001\000\036\003\125\004\035\005\007\006\013\007" +
    "\027\013\014\014\025\015\010\016\024\017\033\021\026" +
    "\023\005\025\022\026\012\001\001\000\002\001\001\000" +
    "\036\003\124\004\035\005\007\006\013\007\027\013\014" +
    "\014\025\015\010\016\024\017\033\021\026\023\005\025" +
    "\022\026\012\001\001\000\036\003\123\004\035\005\007" +
    "\006\013\007\027\013\014\014\025\015\010\016\024\017" +
    "\033\021\026\023\005\025\022\026\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\137\010\136\013\014\014\025\015\010\016\024\017\033" +
    "\023\005\025\022\026\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\140\001\001\000\004\011\142" +
    "\001\001\000\024\007\143\013\014\014\025\015\010\016" +
    "\024\017\033\023\005\025\022\026\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\137\010\155\013\014\014\025\015\010\016\024\017\033" +
    "\023\005\025\022\026\012\001\001\000\002\001\001\000" +
    "\004\017\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\153\004\035\005\007\006\013\007\027\013" +
    "\014\014\025\015\010\016\024\017\033\021\026\023\005" +
    "\025\022\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ErrorMsg errorMsg;
	public parser(java_cup.runtime.Scanner scan, ErrorMsg err) {
		this(scan);
		errorMsg = err;
	}
	public void syntax_error(java_cup.runtime.Symbol current) {
	    report_error("Syntax error (" + current.sym + ")", current);
	}

	public void report_error(String message, java_cup.runtime.Symbol info) {
		errorMsg.error(info.left, message);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // index ::= NUM 
            {
              Index RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = new Index(nleft, new Num(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // empty ::= EMPTY 
            {
              Empty RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Empty(eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // constant ::= STR 
            {
              Constant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StrConstant(sleft, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constant ::= NUM 
            {
              Constant RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumConstant(nleft, new Num(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constant ::= FALSE 
            {
              Constant RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constant ::= TRUE 
            {
              Constant RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // domain ::= NIN 
            {
              Domain RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nin(nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // domain ::= IN 
            {
              Domain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new In(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // quantifier ::= NEXISTS 
            {
              Quantifier RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nexists(nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // quantifier ::= EXISTS 
            {
              Quantifier RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exists(eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // quantifier ::= FORALL 
            {
              Quantifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForAll(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // userVariable ::= ID 
            {
              UserVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserVariable(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable ::= ID LBRACK index RBRACK 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Index idx = (Index)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IndexVariable(ileft, new Identifier(i), idx); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable ::= ID 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdVariable(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // set_exp ::= LBRACE term COLON variable SETDEF formula RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Term u = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula sf = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Setdef(sleft, u, v, sf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // set_exp ::= LBRACE LBRACK terms RBRACK RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Terms ts = (Terms)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new BraceTerms(lleft, ts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // set_exp ::= LBRACE term RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BraceTerm(lleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // set_exp ::= term DIFF term 
            {
              SetExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diff(dleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // set_exp ::= term UNION term 
            {
              SetExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Union(uleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arith_exp ::= MINUS term 
            {
              ArithExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegExp(mleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arith_exp ::= term MOD term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mod(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arith_exp ::= term DIV term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Div(dleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arith_exp ::= term MUL term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mul(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arith_exp ::= term PLUS term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(pleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arith_exp ::= term MINUS term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel_exp ::= term NIN term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NinRel(nleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel_exp ::= term IN term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InRel(ileft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel_exp ::= term LEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeqRel(lleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel_exp ::= term GEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeqRel(gleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel_exp ::= term LT term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtRel(lleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_exp ::= term GT term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtRel(gleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_exp ::= term NEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeqRel(nleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rel_exp ::= term EQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqRel(eleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= set_exp 
            {
              Exp RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SetExp se = (SetExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SExp(seleft, se); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= LPAREN rel_exp RPAREN 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelExp re = (RelExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RExp(releft, re, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= rel_exp 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelExp re = (RelExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RExp(releft, re); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= LPAREN arith_exp RPAREN 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithExp ae = (ArithExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AExp(aeleft, ae, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= arith_exp 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithExp ae = (ArithExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AExp(aeleft, ae); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termRests ::= termRests termRest 
            {
              TermRestList RESULT =null;
		int trsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermRestList trs = (TermRestList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermRest tr = (TermRest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 trs.addElement(tr); RESULT = trs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRests",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termRests ::= 
            {
              TermRestList RESULT =null;
		 RESULT = new TermRestList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRests",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // termRest ::= COMMA term 
            {
              TermRest RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TermRest(cleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRest",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // terms ::= term termRests 
            {
              Terms RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermRestList tr = (TermRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terms(tleft, t, tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= ID LPAREN terms RPAREN 
            {
              FunctionExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Terms t = (Terms)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionExp(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= ID LPAREN RPAREN 
            {
              FunctionExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionExp(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= function 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionExp f = (FunctionExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTerm(fleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= exp 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpTerm(eleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= empty 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Empty e = (Empty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EmptyTerm(eleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= variable 
            {
              Term RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableTerm(vleft, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= constant 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantTerm(cleft, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // complexFormula ::= quantifier userVariable domain variable DOT LPAREN formula RPAREN 
            {
              ComplexFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Quantifier q = (Quantifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		UserVariable u = (UserVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Domain d = (Domain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ComplexFormula(qleft, q, u, d, v, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complexFormula",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compoundFormula ::= formula EQUIV formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EquivFormula(eleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compoundFormula ::= formula IMP formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ImpFormula(ileft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compoundFormula ::= formula OR formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrFormula(oleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compoundFormula ::= formula AND formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndFormula(aleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atomicFormula ::= term 
            {
              AtomicFormula RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtomicTerm(tleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicFormula",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomicFormula ::= NOT formula 
            {
              AtomicFormula RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotFormula(nleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicFormula",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formula ::= LPAREN formula RPAREN 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula ::= complexFormula 
            {
              Formula RESULT =null;
		int cpfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComplexFormula cpf = (ComplexFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CpxFormula(cpfleft, cpf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula ::= compoundFormula 
            {
              Formula RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundFormula cf = (CompoundFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CpFormula(cfleft, cf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= atomicFormula 
            {
              Formula RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AtomicFormula af = (AtomicFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtFormula(afleft, af); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentence ::= formula 
            {
              Sentence RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Sentence(fleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentence start_val = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

