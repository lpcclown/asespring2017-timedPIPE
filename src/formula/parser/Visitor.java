package formula.parser;

import formula.absyntree.*;

public interface Visitor {
	public void visit(AndFormula elem);
	public void visit(BraceTerm elem);
	public void visit(BraceTerms elem);
	public void visit(ComplexFormula elem);
	public void visit(ConstantTerm elem);
	public void visit(Diff elem);
	public void visit(Div elem);
	public void visit(EqRel elem);
	public void visit(EquivFormula elem);
	public void visit(Exists elem);
	public void visit(ExpTerm elem);
	public void visit(False elem);
	public void visit(ForAll elem);
	public void visit(GeqRel elem);
	public void visit(GtRel elem);
	public void visit(Identifier elem);
	public void visit(IdVariable elem);
	public void visit(ImpFormula elem);
	public void visit(In elem);
	public void visit(Index elem);
	public void visit(IndexVariable elem);
	public void visit(InRel elem);
	public void visit(LeqRel elem);
	public void visit(LtRel elem);
	public void visit(Minus elem);
	public void visit(Mod elem);
	public void visit(Mul elem);
	public void visit(NegExp elem);
	public void visit(NeqRel elem);
	public void visit(Nexists elem);
	public void visit(Nin elem);
	public void visit(NinRel elem);
	public void visit(NotFormula elem);
	public void visit(NumConstant elem);
	public void visit(StrConstant elem);
	public void visit(Num elem);
	public void visit(OrFormula elem);
	public void visit(Plus elem);
	public void visit(TermRest elem);
	public void visit(Terms elem);
	public void visit(True elem);
	public void visit(Union elem);
	public void visit(UserVariable elem);
	public void visit(VariableTerm elem);
	public void visit(AExp elem);
	public void visit(RExp elem);
	public void visit(SExp elem);
	public void visit(AtomicTerm elem);
	public void visit(AtFormula elem);
	public void visit(CpFormula elem);
	public void visit(CpxFormula elem);
	public void visit(Sentence elem);
	public void visit(Empty elem);
	public void visit(EmptyTerm elem);
	public void visit(Setdef elem);
	void visit (final FunctionExp pTerm);
}
